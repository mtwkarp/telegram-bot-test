import PrivateCmdHandler from '../../PrivateCmdHandler';
import {CMD_NAMES} from '../../../../types/enums';
import {IPrivateContextDecorator} from '../../../../tglib/tgTypes/contextDecoratorTypes';
import {IPrivateTextPayload} from '../../../../tglib/tgTypes/messagePayload/contextPayloadTypes';
import {addMinutes, format, newValidDate} from "ts-date";
import TimingsCollection from "../../../../db/firestore/collectionManagers/implementations/TimingsCollection";

export default class TimingCmdHandler extends PrivateCmdHandler {
    constructor(userId: number) {
        super(userId, CMD_NAMES.SEND_TIMING);
    }

    protected override onCommand(contextDecorator: IPrivateContextDecorator): void {
        this.sendMessage('–ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —á–∞—Å —Å—Ç–∞—Ä—Ç—É –∑–∞–Ω—è—Ç—å —É –Ω–∞—Å—Ç—É–ø–Ω–æ–º—É —Ñ–æ—Ä–º–∞—Ç—ñ - 10:40.');
    }

    protected override async onText(contextDecorator: IPrivateContextDecorator): Promise<void> {
        const payload = contextDecorator.payload as IPrivateTextPayload;
        const result = this.validateTimeFormat(payload.text);

        if(typeof result === 'boolean') {
            const message = this.generateTiming(payload.text);

            await this.tg.sendMessage(process.env.TELEGRAM_CHANNEL_ID as string, message);
        }else {
            await this.sendMessage(result as string);
        }
    }

    private generateTiming(startTime: string): string {
        const splitTime = startTime.split(':')
        const hour = Number(splitTime[0])
        const minute = Number(splitTime[1])
        const timingMinutes = TimingsCollection.getInstance().getCenterTiming()

        const timingsArr: string[] = []
        let validDate = newValidDate(2022, 6, 3, hour, minute)
        let previousDate = newValidDate(2022, 6, 3, hour, minute)

        // @ts-ignore
        timingsArr.push(format(validDate, 'HH:mm'))

        for (let i = 0; i < timingMinutes.length; i++) {
            validDate = addMinutes(validDate, timingMinutes[i])

            const formatted = format(validDate, 'HH:mm')
            const formattedPrevious = format(previousDate, 'HH:mm')

            if(formatted) {
                if(i > 0 && formattedPrevious) {
                    timingsArr.push(formattedPrevious)
                }
                timingsArr.push(formatted)
            }

            previousDate = validDate
        }

        return this.generateMessage(timingsArr)
    }

    private generateMessage(timings: string[]): string {
        return `–ì–†–ê–§–Ü–ö üï∞\n
ü©∏M ${timings[0]}-${timings[1]}\n 
        
üèù–ü–µ—Ä–µ—Ä–≤–∞ ${timings[2]}-${timings[3]}\n
        
ü´Å${timings[4]}-${timings[5]}\n
        
üçî–û–±—ñ–¥ ${timings[6]} - ${timings[7]}\n 
            
ü´®CH ${timings[8]} - ${timings[9]}\n 
          
üèù–ü–µ—Ä–µ—Ä–≤–∞ ${timings[10]} - ${timings[11]}\n 
            
üöë–ï–≤–∞–∫—É–∞—Ü—ñ—è ${timings[12]} - ${timings[13]}\n 
            
üèù–ü–µ—Ä–µ—Ä–≤–∞ ${timings[14]} - ${timings[15]}\n 
            
üé™–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü—ñ—è –∞–ª–≥–æ—Ä–∏—Ç–º—É —ñ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º –Ω–∞ –±–∞–∑—ñ ${timings[16]} - ${timings[17]}\n 
            
üß†–°–∏–Ω—Ç–µ–∑ –∞–ª–≥–æ—Ä–∏—Ç–º—É –Ω–∞ —Å–≤–æ—ó—Ö –±–∞–∑–∞—Ö ${timings[18]} - ${timings[19]}\n 
            
üèù–ü–µ—Ä–µ—Ä–≤–∞ ${timings[20]} - ${timings[21]}\n 
            
üíª–°–ò–ú–£–õ–Ø–¶–Ü–Ø ${timings[22]} - ${timings[23]}\n 
             
üì£–î–µ–±—Ä–∏—Ñ—ñ–Ω–≥ –ø–æ —Å–∏–º—É–ª—è—Ü—ñ—ó –∑ –∫—É—Ä—Å–∞–Ω—Ç–∞–º–∏ ${timings[24]} - ${timings[25]}\n
            
–ó–±—ñ—Ä —Å—Ç–∞—Ñ—É (–≤–µ—Å–µ–ª—ñ—Ç—å—Å—è —Å–∫—ñ–ª—å–∫–∏ —Ö–æ—á–µ—Ç–µ).
        `
    }

    private validateTimeFormat(timeString: string): string | boolean {
        // Regular expression to match the time format "HH:mm"
        const timeRegex = /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/;

        if (timeRegex.test(timeString)) {
            return true;
        } else {
            return '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É. –§–æ—Ä–º–∞—Ç –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ "HH:mm", –¥–µ HH - –≥–æ–¥–∏–Ω–∏ (–≤—ñ–¥ 00 –¥–æ 23), –∞ mm - —Ö–≤–∏–ª–∏–Ω–∏ (–≤—ñ–¥ 00 –¥–æ 59).';
        }
    }
    copy(): PrivateCmdHandler {
        return new TimingCmdHandler(this.id);
    }
}